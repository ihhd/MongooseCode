// whenever you are installing any packages in your project, you have to manage those packages because 
// is it for developers or for your project that managed by package.json file which is generated by npm init -y
const mongoose = require("mongoose"); // properties and methods i can use them easily



//connection creation and creation a new db
mongoose.connect("mongodb://localhost:27017/ttchannel",{
    useNewUrlParser:true,
    useUnifiedTopology:true
}).then(()=>console.log("Connection is Successfull"))
.catch((err)=>console.log(err));

// Schema-->Defines the structure of the document,default values,validators etc..
// 
const playlistSchema = new mongoose.Schema({
    name : {
        type : String,
        required : true
    },
    ctype : String,
    videos : Number,
    author : String,
    active : Boolean,
    date : {
        type : Date,
        default : Date.now
    }
})

//  a mongoose model is a wrapper on the mongoose schema
// a mongoose schema defines the structure of the document,default values, validators, etc..
// whereas a mongoose model provides an interface to the database for creating, querying,upadting,deleting records
// creation of model means craeting collection

// collection creation
const Playlist = new mongoose.model("Playlist",playlistSchema);
// create document or insert
const createDocument = async () => {
    try{
        const jsPlaylist = new Playlist({
            name : "javascript",
            ctype : "Front End",
            videos : 150,
            author : "Ishwar",
            active : true,
        })
        const mongoPlaylist = new Playlist({
            name : "MongoDB",
            ctype : "Database",
            videos : 10,
            author : "Ishwar",
            active : true,
        })
        const mongoosePlaylist = new Playlist({
            name : "Mongoose",
            ctype : "Database",
            videos : 4,
            author : "Ishwar",
            active : true,
        })
        const expressPlaylist = new Playlist({
            name : "Express JS",
            ctype : "Back End",
            videos : 20,
            author : "Ishwar",
            active : true,
        })
        const result = await Playlist.insertMany([jsPlaylist,mongoPlaylist,mongoosePlaylist,expressPlaylist]);
        console.log(result)
    }catch(err){
        console.log(err)
    }
}
// createDocument();

// read the document or get the document

const getDocument = async () => {
    try{
    const result = await Playlist
    .find({author : "Ishwar"})
    .select({name:1})
    .sort({name : -1});
    // .countDocuments();
    // .limit(1)
    console.log(result)
    }catch(err){
        console.log(err)
    }
    
}
getDocument();

// update the Document
const updateDocument = async (_id) => {
    try{
        const result = await Playlist.findByIdAndUpdate({_id},{
            $set: {
                name : "Javascript"
            }
        },{
            new : true,
            useFindAndModify : false
        });
        console.log(result)
    }catch(err){
        console.log(err)
    }
   
}
// updateDocument("62825ac28f6e21ea7da33997");

// delete the Document
const deleteDocument = async (_id) => {
    try{
        const result = await Playlist.findByIdAndDelete({_id});
        console.log(result)
    }catch(err){
        console.log(err)
    }
    
}

// deleteDocument("62825ac28f6e21ea7da33999")






